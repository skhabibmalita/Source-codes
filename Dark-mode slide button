<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Theme Toggle</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        :root {
            --background: #f0f2f5;
            --text-primary: #333;
            --toggle-bg: #e0e0e0;
            --toggle-border: #d0d0d0;
            --particle-color-1: rgba(255, 200, 100, 0.6);
            --particle-color-2: rgba(100, 200, 255, 0.4);
            --particle-color-3: rgba(255, 150, 150, 0.5);
        }

        .dark-theme {
            --background: #1a1a2e;
            --text-primary: #f0f0f0;
            --toggle-bg: #303045;
            --toggle-border: #404060;
            --particle-color-1: rgba(255, 255, 255, 0.3);
            --particle-color-2: rgba(180, 180, 255, 0.2);
            --particle-color-3: rgba(150, 150, 255, 0.3);
        }

        body {
            background-color: var(--background);
            color: var(--text-primary);
            transition: all 0.5s ease;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            position: relative;
        }

        .toggle-container {
            position: relative;
            margin: 40px auto;
            width: 220px;
            height: 100px;
            cursor: pointer;
            z-index: 10;
        }

        .toggle-track {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--toggle-bg);
            border: 3px solid var(--toggle-border);
            border-radius: 50px;
            transition: background-color 0.5s ease;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        .toggle-knob {
            position: absolute;
            top: 5px;
            left: 5px;
            width: 90px;
            height: 90px;
            background-color: #ffffff;
            border-radius: 50%;
            transition: transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1), box-shadow 0.5s ease;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }

        .toggle-checkbox {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-checkbox:checked + .toggle-track .toggle-knob {
            transform: translateX(120px);
            background-color: #121236;
        }

        .sun-moon-container {
            position: relative;
            width: 60px;
            height: 60px;
        }

        /* Sun styles */
        .sun {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #ffb142;
            border-radius: 50%;
            transition: all 0.5s ease;
            opacity: 1;
            transform: scale(1);
        }

        .sun-ray {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 80%;
            height: 80%;
            border-radius: 50%;
            background: transparent;
            transform: translate(-50%, -50%);
        }

        .sun-ray::before, .sun-ray::after {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            width: 4px;
            height: 100%;
            background: #ffb142;
            margin-left: -2px;
            transform-origin: center center;
        }

        .sun-ray::after {
            transform: rotate(90deg);
        }

        .sun-ray-1 {
            transform: translate(-50%, -50%) rotate(0deg);
        }
        .sun-ray-2 {
            transform: translate(-50%, -50%) rotate(45deg);
        }
        .sun-ray-3 {
            transform: translate(-50%, -50%) rotate(90deg);
        }
        .sun-ray-4 {
            transform: translate(-50%, -50%) rotate(135deg);
        }

        .toggle-checkbox:checked + .toggle-track .sun {
            opacity: 0;
            transform: scale(0.5);
        }

        /* Moon styles */
        .moon {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: transparent;
            border-radius: 50%;
            transition: all 0.5s ease;
            opacity: 0;
            transform: scale(0.5) rotate(90deg);
            overflow: hidden;
        }

        .toggle-checkbox:checked + .toggle-track .moon {
            opacity: 1;
            transform: scale(1) rotate(0deg);
        }

        .moon-body {
            position: absolute;
            top: 0;
            right: 0;
            width: 100%;
            height: 100%;
            background: #e6e6e6;
            border-radius: 50%;
            box-shadow: inset -10px 2px 0 0 #c9c9c9;
        }

        .star {
            position: absolute;
            background: white;
            border-radius: 50%;
            animation: twinkle 1.5s infinite alternate;
        }

        .star-1 {
            width: 4px;
            height: 4px;
            top: 20%;
            left: 25%;
            animation-delay: 0s;
        }

        .star-2 {
            width: 5px;
            height: 5px;
            top: 30%;
            left: 55%;
            animation-delay: 0.3s;
        }

        .star-3 {
            width: 3px;
            height: 3px;
            top: 60%;
            left: 40%;
            animation-delay: 0.6s;
        }

        @keyframes twinkle {
            from { opacity: 0.4; }
            to { opacity: 1; }
        }

        .slider-text {
            font-size: 18px;
            font-weight: bold;
            margin-top: 20px;
            text-align: center;
            transition: all 0.5s ease;
            z-index: 10;
            position: relative;
        }

        .title {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 30px;
            text-align: center;
            position: relative;
            z-index: 10;
            transition: all 0.5s ease;
        }

        /* Animation for sun rays */
        .sun-ray-1 {
            animation: rotate 10s linear infinite;
        }
        .sun-ray-2 {
            animation: rotate 15s linear infinite reverse;
        }
        .sun-ray-3 {
            animation: rotate 20s linear infinite;
        }
        .sun-ray-4 {
            animation: rotate 25s linear infinite reverse;
        }

        @keyframes rotate {
            from { transform: translate(-50%, -50%) rotate(0deg); }
            to { transform: translate(-50%, -50%) rotate(360deg); }
        }

        /* Background animations */
        .background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            overflow: hidden;
            pointer-events: none;
            transition: opacity 1s ease;
        }

        /* Light mode background */
        .light-bg {
            opacity: 1;
        }

        .dark-theme .light-bg {
            opacity: 0;
        }

        /* Dark mode background */
        .dark-bg {
            opacity: 0;
            background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
        }

        .dark-theme .dark-bg {
            opacity: 1;
        }

        /* Light mode floating particles */
        .particle {
            position: absolute;
            border-radius: 50%;
            opacity: 0;
            animation: float-up var(--duration) ease-in infinite;
            z-index: 1;
        }

        @keyframes float-up {
            0% {
                transform: translateY(100vh) translateX(0) scale(0);
                opacity: 0;
            }
            20% {
                opacity: var(--opacity);
            }
            80% {
                opacity: var(--opacity);
            }
            100% {
                transform: translateY(-20vh) translateX(var(--travel)) scale(var(--scale));
                opacity: 0;
            }
        }

        /* Dark mode stars */
        .stars {
            width: 100%;
            height: 100%;
            position: absolute;
        }

        .star-bg {
            position: absolute;
            border-radius: 50%;
            background: white;
            animation: twinkle-star var(--duration) ease-in-out infinite;
            opacity: 0;
        }

        @keyframes twinkle-star {
            0% {
                opacity: 0;
                transform: scale(0.5);
            }
            50% {
                opacity: var(--opacity);
                transform: scale(1);
            }
            100% {
                opacity: 0;
                transform: scale(0.5);
            }
        }

        /* Shooting stars */
        .shooting-star {
            position: absolute;
            height: 2px;
            background: linear-gradient(90deg, white, transparent);
            border-radius: 50%;
            filter: drop-shadow(0 0 6px white);
            animation: shoot var(--duration) ease-out infinite;
            opacity: 0;
        }

        @keyframes shoot {
            0% {
                transform: translateX(0) translateY(0) rotate(var(--angle));
                opacity: 1;
                width: 0;
            }
            20% {
                width: var(--size);
                opacity: 1;
            }
            100% {
                transform: translateX(var(--travel-x)) translateY(var(--travel-y)) rotate(var(--angle));
                opacity: 0;
                width: var(--size);
            }
        }

        /* Clouds for light mode */
        .cloud {
            position: absolute;
            width: var(--size);
            height: calc(var(--size) * 0.6);
            background: rgba(255, 255, 255, 0.8);
            border-radius: 50px;
            animation: float-cloud var(--duration) linear infinite;
            opacity: 0.6;
            box-shadow: 0 8px 10px rgba(0, 0, 0, 0.1);
        }

        .cloud:before, .cloud:after {
            content: '';
            position: absolute;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
        }

        .cloud:before {
            width: calc(var(--size) * 0.4);
            height: calc(var(--size) * 0.4);
            top: calc(var(--size) * -0.15);
            left: calc(var(--size) * 0.1);
        }

        .cloud:after {
            width: calc(var(--size) * 0.6);
            height: calc(var(--size) * 0.6);
            top: calc(var(--size) * -0.25);
            left: calc(var(--size) * 0.4);
        }

        @keyframes float-cloud {
            0% {
                transform: translateX(calc(0px - var(--size) - 100px));
                opacity: 0;
            }
            10% {
                opacity: var(--opacity);
            }
            90% {
                opacity: var(--opacity);
            }
            100% {
                transform: translateX(calc(100vw + var(--size) + 100px));
                opacity: 0;
            }
        }

        /* Rising sun and moon animations */
        .sun-container {
            position: absolute;
            bottom: -150px;
            left: 50%;
            transform: translateX(-50%);
            width: 300px;
            height: 300px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(255,177,66,1) 0%, rgba(255,177,66,0.7) 50%, rgba(255,177,66,0) 70%);
            opacity: 0;
            transition: all 1s ease;
            animation: sun-glow 5s infinite alternate;
            z-index: 2;
        }

        .dark-theme .sun-container {
            opacity: 0;
            transform: translateX(-50%) translateY(300px);
        }

        .light-theme .sun-container {
            opacity: 0.7;
            transform: translateX(-50%) translateY(0);
        }

        @keyframes sun-glow {
            from { box-shadow: 0 0 50px rgba(255, 177, 66, 0.5); }
            to { box-shadow: 0 0 100px rgba(255, 177, 66, 0.7); }
        }

        .moon-container {
            position: absolute;
            top: -150px;
            right: 10%;
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(230,230,230,1) 0%, rgba(230,230,230,0.7) 60%, rgba(230,230,230,0) 70%);
            opacity: 0;
            transition: all 1s ease;
            box-shadow: inset -20px 10px 0 0 rgba(180, 180, 180, 0.4);
            animation: moon-glow 5s infinite alternate;
            z-index: 2;
        }

        .dark-theme .moon-container {
            opacity: 0.8;
            transform: translateY(150px);
        }

        .light-theme .moon-container {
            opacity: 0;
            transform: translateY(-150px);
        }

        @keyframes moon-glow {
            from { box-shadow: inset -20px 10px 0 0 rgba(180, 180, 180, 0.4), 0 0 20px rgba(255, 255, 255, 0.3); }
            to { box-shadow: inset -20px 10px 0 0 rgba(180, 180, 180, 0.4), 0 0 40px rgba(255, 255, 255, 0.5); }
        }

        /* Responsive styles */
        @media (max-width: 640px) {
            .toggle-container {
                width: 180px;
                height: 80px;
            }
            
            .toggle-knob {
                width: 70px;
                height: 70px;
            }
            
            .toggle-checkbox:checked + .toggle-track .toggle-knob {
                transform: translateX(100px);
            }
            
            .sun-moon-container {
                width: 50px;
                height: 50px;
            }

            .title {
                font-size: 24px;
            }

            .sun-container {
                width: 200px;
                height: 200px;
            }

            .moon-container {
                width: 80px;
                height: 80px;
            }
        }

        /* Theme transition effect */
        .theme-transition {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: transparent;
            z-index: 100;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        
        .theme-transition.active {
            opacity: 0.3;
            background-color: white;
        }

        /* Theme indicators */
        .theme-indicator {
            position: absolute;
            z-index: 5;
            transition: all 0.5s ease;
        }
        
        .light-indicator {
            bottom: 20px;
            right: 20px;
            opacity: 1;
        }
        
        .dark-indicator {
            bottom: 20px;
            right: 20px;
            opacity: 0;
        }
        
        .dark-theme .light-indicator {
            opacity: 0;
        }
        
        .dark-theme .dark-indicator {
            opacity: 1;
        }
    </style>
</head>
<body class="light-theme">
    <div class="theme-transition" id="transition"></div>
    
    <!-- Background animations -->
    <div class="background light-bg" id="light-bg"></div>
    <div class="background dark-bg" id="dark-bg"></div>
    
    <!-- Sun and Moon background elements -->
    <div class="sun-container"></div>
    <div class="moon-container"></div>
    
    <div class="container mx-auto px-4 relative z-10">
        <h1 class="title" id="title">Theme Toggle</h1>
        
        <div class="toggle-container" id="toggle-container">
            <input type="checkbox" id="toggle" class="toggle-checkbox">
            <label for="toggle" class="toggle-track">
                <div class="toggle-knob">
                    <div class="sun-moon-container">
                        <!-- Sun -->
                        <div class="sun">
                            <div class="sun-ray sun-ray-1"></div>
                            <div class="sun-ray sun-ray-2"></div>
                            <div class="sun-ray sun-ray-3"></div>
                            <div class="sun-ray sun-ray-4"></div>
                        </div>
                        
                        <!-- Moon -->
                        <div class="moon">
                            <div class="moon-body"></div>
                            <div class="star star-1"></div>
                            <div class="star star-2"></div>
                            <div class="star star-3"></div>
                        </div>
                    </div>
                </div>
            </label>
        </div>
        
        <div class="slider-text" id="mode-text">Light Mode</div>
    </div>
    
    <!-- Theme indicators -->
    <div class="theme-indicator light-indicator flex items-center text-xs font-semibold">
        <span class="mr-2 text-yellow-600">☀️ Light Theme</span>
    </div>
    <div class="theme-indicator dark-indicator flex items-center text-xs font-semibold">
        <span class="mr-2 text-indigo-300">🌙 Dark Theme</span>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const toggle = document.getElementById('toggle');
            const body = document.body;
            const modeText = document.getElementById('mode-text');
            const transition = document.getElementById('transition');
            const lightBg = document.getElementById('light-bg');
            const darkBg = document.getElementById('dark-bg');
            
            // Check for saved theme in localStorage
            const savedTheme = localStorage.getItem('theme');
            
            // Check if user has a preferred color scheme
            const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            // Set initial theme based on saved preference or system preference
            if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
                body.classList.remove('light-theme');
                body.classList.add('dark-theme');
                toggle.checked = true;
                modeText.textContent = 'Dark Mode';
            } else {
                body.classList.add('light-theme');
                body.classList.remove('dark-theme');
                toggle.checked = false;
                modeText.textContent = 'Light Mode';
            }
            
            // Create initial background elements
            createBackgroundElements();
            
            // Toggle theme when the switch is clicked
            toggle.addEventListener('change', function() {
                transition.classList.add('active');
                
                setTimeout(() => {
                    if (this.checked) {
                        body.classList.remove('light-theme');
                        body.classList.add('dark-theme');
                        localStorage.setItem('theme', 'dark');
                        modeText.textContent = 'Dark Mode';
                    } else {
                        body.classList.add('light-theme');
                        body.classList.remove('dark-theme');
                        localStorage.setItem('theme', 'light');
                        modeText.textContent = 'Light Mode';
                    }
                    
                    transition.classList.remove('active');
                }, 300);
            });
            
            // Create background elements
            function createBackgroundElements() {
                // Create light mode elements (floating particles and clouds)
                createFloatingParticles();
                createClouds();
                
                // Create dark mode elements (stars and shooting stars)
                createStars();
                createShootingStars();
                
                // Recreate elements periodically to ensure animation continues
                setInterval(createFloatingParticles, 10000);
                setInterval(createClouds, 15000);
                setInterval(createShootingStars, 8000);
            }
            
            function createFloatingParticles() {
                // Clear existing particles
                const existingParticles = lightBg.querySelectorAll('.particle');
                existingParticles.forEach(p => {
                    // Keep some particles to avoid complete clearing
                    if (Math.random() > 0.3) {
                        p.remove();
                    }
                });
                
                // Create new particles
                const particleCount = Math.floor(window.innerWidth / 20);
                
                for (let i = 0; i < particleCount; i++) {
                    const particle = document.createElement('div');
                    particle.classList.add('particle');
                    
                    // Random properties
                    const size = Math.random() * 30 + 10;
                    const posX = Math.random() * 100;
                    const delay = Math.random() * 5;
                    const duration = Math.random() * 20 + 10;
                    const travel = (Math.random() - 0.5) * 200;
                    const opacity = Math.random() * 0.6 + 0.2;
                    const scale = Math.random() * 1.5 + 0.5;
                    
                    // Set color based on index
                    let color;
                    const colorIndex = i % 3;
                    if (colorIndex === 0) color = 'var(--particle-color-1)';
                    else if (colorIndex === 1) color = 'var(--particle-color-2)';
                    else color = 'var(--particle-color-3)';
                    
                    // Apply styles
                    particle.style.width = `${size}px`;
                    particle.style.height = `${size}px`;
                    particle.style.left = `${posX}%`;
                    particle.style.bottom = `-${size}px`;
                    particle.style.backgroundColor = color;
                    particle.style.boxShadow = `0 0 ${size/3}px ${color}`;
                    particle.style.animationDelay = `${delay}s`;
                    particle.style.setProperty('--duration', `${duration}s`);
                    particle.style.setProperty('--travel', `${travel}px`);
                    particle.style.setProperty('--opacity', opacity);
                    particle.style.setProperty('--scale', scale);
                    
                    lightBg.appendChild(particle);
                }
            }
            
            function createClouds() {
                // Remove old clouds
                const existingClouds = lightBg.querySelectorAll('.cloud');
                existingClouds.forEach(c => {
                    // Keep some clouds
                    if (Math.random() > 0.3) {
                        c.remove();
                    }
                });
                
                // Create new clouds
                const cloudCount = Math.floor(window.innerWidth / 300) + 2;
                
                for (let i = 0; i < cloudCount; i++) {
                    const cloud = document.createElement('div');
                    cloud.classList.add('cloud');
                    
                    // Random properties
                    const size = Math.random() * 100 + 50;
                    const posY = Math.random() * 40 + 5;
                    const delay = Math.random() * 10;
                    const duration = Math.random() * 60 + 60;
                    const opacity = Math.random() * 0.3 + 0.3;
                    
                    // Apply styles
                    cloud.style.setProperty('--size', `${size}px`);
                    cloud.style.top = `${posY}%`;
                    cloud.style.animationDelay = `${delay}s`;
                    cloud.style.setProperty('--duration', `${duration}s`);
                    cloud.style.setProperty('--opacity', opacity);
                    
                    lightBg.appendChild(cloud);
                }
            }
            
            function createStars() {
                // Create stars container
                const starsContainer = document.createElement('div');
                starsContainer.classList.add('stars');
                darkBg.appendChild(starsContainer);
                
                // Create stars
                const starCount = Math.floor((window.innerWidth * window.innerHeight) / 1000);
                
                for (let i = 0; i < starCount; i++) {
                    const star = document.createElement('div');
                    star.classList.add('star-bg');
                    
                    // Random properties
                    const size = Math.random() * 3 + 1;
                    const posX = Math.random() * 100;
                    const posY = Math.random() * 100;
                    const duration = Math.random() * 5 + 3;
                    const delay = Math.random() * 5;
                    const opacity = Math.random() * 0.8 + 0.2;
                    
                    // Apply styles
                    star.style.width = `${size}px`;
                    star.style.height = `${size}px`;
                    star.style.left = `${posX}%`;
                    star.style.top = `${posY}%`;
                    star.style.animationDelay = `${delay}s`;
                    star.style.setProperty('--duration', `${duration}s`);
                    star.style.setProperty('--opacity', opacity);
                    
                    starsContainer.appendChild(star);
                }
            }
            
            function createShootingStars() {
                // Remove old shooting stars
                const existingStars = darkBg.querySelectorAll('.shooting-star');
                existingStars.forEach(s => s.remove());
                
                // Create new shooting stars
                const starCount = Math.floor(window.innerWidth / 300) + 2;
                
                for (let i = 0; i < starCount; i++) {
                    const star = document.createElement('div');
                    star.classList.add('shooting-star');
                    
                    // Random properties
                    const size = Math.random() * 150 + 50;
                    const posX = Math.random() * 100;
                    const posY = Math.random() * 40;
                    const duration = Math.random() * 4 + 2;
                    const delay = Math.random() * 8;
                    const angle = Math.random() * 60 - 30;
                    const travelX = (Math.random() + 0.5) * window.innerWidth / 2;
                    const travelY = (Math.random() + 0.5) * window.innerHeight / 2;
                    
                    // Apply styles
                    star.style.left = `${posX}%`;
                    star.style.top = `${posY}%`;
                    star.style.setProperty('--size', `${size}px`);
                    star.style.setProperty('--angle', `${angle}deg`);
                    star.style.setProperty('--travel-x', `${travelX}px`);
                    star.style.setProperty('--travel-y', `${travelY}px`);
                    star.style.animationDelay = `${delay}s`;
                    star.style.setProperty('--duration', `${duration}s`);
                    
                    darkBg.appendChild(star);
                }
            }
            
            // Handle window resize
            window.addEventListener('resize', () => {
                // Clear and recreate background elements on resize
                lightBg.innerHTML = '';
                darkBg.innerHTML = '';
                createBackgroundElements();
            });
        });
    </script>
</body>
</html>
